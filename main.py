import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ =====
st.set_page_config(
    page_title="PsychoTest Pro",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ===== –°–¢–ò–õ–ò –î–õ–Ø –ö–†–ê–°–û–¢–´ =====
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #6a5acd;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .test-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 20px;
        color: white;
        margin: 1rem 0;
        transition: transform 0.3s ease;
    }
    .test-card:hover {
        transform: translateY(-5px);
    }
    .stButton>button {
        background: linear-gradient(45deg, #FF4B4B, #FF6B6B);
        color: white;
        border: none;
        border-radius: 15px;
        padding: 12px 25px;
        font-size: 1.1rem;
        font-weight: bold;
    }
    .result-box {
        background: linear-gradient(135deg, #00b09b 0%, #96c93d 100%);
        padding: 2rem;
        border-radius: 20px;
        color: white;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# ===== –î–ê–ù–ù–´–ï –¢–ï–°–¢–û–í =====
TESTS = {
    "depression": {
        "title": "üìä –¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é",
        "description": "–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
        "questions": [
            {
                "text": "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å?",
                "options": ["–ù–∏–∫–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ"],
                "scores": [0, 1, 2, 3, 4]
            },
            {
                "text": "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º?",
                "options": ["–ù–∏–∫–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ"],
                "scores": [0, 1, 2, 3, 4]
            },
            {
                "text": "–ò—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –ª–∏ –≤—ã —É—Å—Ç–∞–ª–æ—Å—Ç—å?",
                "options": ["–ù–∏–∫–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ"],
                "scores": [0, 1, 2, 3, 4]
            }
        ],
        "interpretation": {
            (0, 4): {"level": "–ù–æ—Ä–º–∞", "emoji": "üòä", "advice": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!"},
            (5, 8): {"level": "–õ–µ–≥–∫–∞—è", "emoji": "üòê", "advice": "–í–æ–∑–º–æ–∂–µ–Ω —Å—Ç—Ä–µ—Å—Å"},
            (9, 12): {"level": "–£–º–µ—Ä–µ–Ω–Ω–∞—è", "emoji": "üòî", "advice": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–¥—ã—Ö"},
            (13, 20): {"level": "–í—ã—Å–æ–∫–∞—è", "emoji": "üò¢", "advice": "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"}
        }
    },
    "anxiety": {
        "title": "üò∞ –¢–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å",
        "description": "–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–≤–æ–≥–∏",
        "questions": [
            {
                "text": "–ë–µ—Å–ø–æ–∫–æ–∏—Ç–µ—Å—å –ª–∏ –≤—ã –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã?",
                "options": ["–ù–∏–∫–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ"],
                "scores": [0, 1, 2, 3, 4]
            },
            {
                "text": "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ?",
                "options": ["–ù–∏–∫–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ"],
                "scores": [0, 1, 2, 3, 4]
            }
        ],
        "interpretation": {
            (0, 3): {"level": "–ù–æ—Ä–º–∞", "emoji": "üòä", "advice": "–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!"},
            (4, 6): {"level": "–õ–µ–≥–∫–∞—è", "emoji": "üòê", "advice": "–ù–µ–±–æ–ª—å—à–æ–µ –≤–æ–ª–Ω–µ–Ω–∏–µ"},
            (7, 8): {"level": "–£–º–µ—Ä–µ–Ω–Ω–∞—è", "emoji": "üòî", "advice": "–ù—É–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è"},
            (9, 20): {"level": "–í—ã—Å–æ–∫–∞—è", "emoji": "üò¢", "advice": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"}
        }
    }
}


# ===== –§–£–ù–ö–¶–ò–ò =====
def show_main_menu():
    st.markdown('<h1 class="main-header">üß† PsychoTest Pro</h1>', unsafe_allow_html=True)
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:")

    for test_key, test_data in TESTS.items():
        with st.container():
            st.markdown(f"""
                <div class="test-card">
                    <h3>{test_data['title']}</h3>
                    <p>{test_data['description']}</p>
                </div>
            """, unsafe_allow_html=True)

            if st.button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", key=f"btn_{test_key}"):
                st.session_state.current_test = test_key
                st.session_state.current_question = 0
                st.session_state.answers = []
                st.session_state.scores = []
                st.rerun()


def run_test():
    test_key = st.session_state.current_test
    test = TESTS[test_key]

    st.title(test["title"])
    st.progress(st.session_state.current_question / len(test["questions"]))

    if st.session_state.current_question < len(test["questions"]):
        question = test["questions"][st.session_state.current_question]

        st.markdown(f"### –í–æ–ø—Ä–æ—Å {st.session_state.current_question + 1} –∏–∑ {len(test['questions'])}")
        st.markdown(f"{question['text']}")

        answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", question["options"], key=f"q{st.session_state.current_question}")

        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí" if st.session_state.current_question < len(
                    test["questions"]) - 1 else "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç ‚úÖ"):
                score_index = question["options"].index(answer)
                st.session_state.answers.append(answer)
                st.session_state.scores.append(question["scores"][score_index])
                st.session_state.current_question += 1
                st.rerun()
    else:
        show_results(test)


def show_results(test):
    total_score = sum(st.session_state.scores)

    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = None
    for score_range, interpretation in test["interpretation"].items():
        if score_range[0] <= total_score <= score_range[1]:
            result = interpretation
            break

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.balloons()
    st.markdown(f"""
        <div class="result-box">
            <h2>{result['emoji']} –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score} –±–∞–ª–ª–æ–≤</h2>
            <h3>{result['level']} —É—Ä–æ–≤–µ–Ω—å</h3>
            <p>{result['advice']}</p>
        </div>
    """, unsafe_allow_html=True)

    # –ì—Ä–∞—Ñ–∏–∫
    df = pd.DataFrame({
        '–í–æ–ø—Ä–æ—Å': [f"–í–æ–ø—Ä. {i + 1}" for i in range(len(st.session_state.scores))],
        '–ë–∞–ª–ª—ã': st.session_state.scores
    })

    fig = px.bar(df, x='–í–æ–ø—Ä–æ—Å', y='–ë–∞–ª–ª—ã', title='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º')
    st.plotly_chart(fig)

    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤
    st.write("### –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
    results_df = pd.DataFrame({
        '–í–æ–ø—Ä–æ—Å': [q['text'] for q in test['questions']],
        '–û—Ç–≤–µ—Ç': st.session_state.answers,
        '–ë–∞–ª–ª—ã': st.session_state.scores
    })
    st.dataframe(results_df, use_container_width=True)

    if st.button("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç"):
        for key in ['current_test', 'current_question', 'answers', 'scores']:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
def main():
    if 'current_test' not in st.session_state:
        show_main_menu()
    else:
        run_test()


if __name__ == "__main__":
    main()