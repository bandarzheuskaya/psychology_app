import streamlit as st
from themes import THEMES
import pandas as pd

def show_results(theme_key, test_key):
    test = THEMES[theme_key]["tests"][test_key]
    total_score = sum(st.session_state.scores)
    max_possible = len(test["questions"]) * max(test["questions"][0]["scores"])  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    result = None
    for score_range, interpretation in test["interpretation"].items():
        if score_range[0] <= total_score <= score_range[1]:
            result = interpretation
            break

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.balloons()
    st.markdown(f"""
        <div class="result-box">
            <h2>{result['emoji']} –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score} –∏–∑ {max_possible} –±–∞–ª–ª–æ–≤</h2>
            <h3>{result['level']}</h3>
            <p>{result['advice']}</p>
        </div>
    """, unsafe_allow_html=True)

    st.markdown("### üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    if max_possible == 16:  # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        low_end = 3
        medium_end = 7
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
        ranges = list(test["interpretation"].keys())
        low_end = ranges[0][1]  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        medium_end = ranges[1][1]  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –≤—Ç–æ—Ä–æ–≥–æ

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    percentage = min(100, (total_score / max_possible) * 100)

    # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞: –∑–µ–ª—ë–Ω—ã–π ‚Üí –∂—ë–ª—Ç—ã–π ‚Üí –∫—Ä–∞—Å–Ω—ã–π
    if percentage <= (low_end / max_possible) * 100:
        color = "#4CAF50"  # –ó–µ–ª—ë–Ω—ã–π
    elif percentage <= (medium_end / max_possible) * 100:
        color = "#FFC107"  # –ñ—ë–ª—Ç—ã–π
    else:
        color = "#F44336"  # –ö—Ä–∞—Å–Ω—ã–π

    # –°–æ–∑–¥–∞—ë–º HTML-—à–∫–∞–ª—É
    st.markdown(f"""
        <div style="
            background-color: #e0e0e0;
            height: 30px;
            border-radius: 15px;
            position: relative;
            margin: 20px 0;
            overflow: hidden;
            width: 100%;
        ">
            <div style="
                background: linear-gradient(90deg, #4CAF50, #FFC107, #F44336);
                height: 100%;
                width: {percentage}%;
                border-radius: 15px;
                transition: width 1s ease-in-out;
            "></div>
            <div style="
                position: absolute;
                top: 50%;
                left: {percentage}%;
                transform: translateX(-50%) translateY(-50%);
                color: white;
                font-weight: bold;
                font-size: 14px;
                text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
                padding: 0 8px;
                background: rgba(0,0,0,0.3);
                border-radius: 15px;
            ">{total_score}/{max_possible}</div>
        </div>
    """, unsafe_allow_html=True)

    # –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ —à–∫–∞–ª–æ–π
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"<div style='text-align: center; color: #4CAF50;'>üîπ –ù–∏–∑–∫–∏–π<br>({0}-{low_end})</div>", unsafe_allow_html=True)
    with col2:
        st.markdown(f"<div style='text-align: center; color: #FFC107;'>üü° –°—Ä–µ–¥–Ω–∏–π<br>({low_end+1}-{medium_end})</div>", unsafe_allow_html=True)
    with col3:
        st.markdown(f"<div style='text-align: center; color: #F44336;'>üî¥ –í—ã—Å–æ–∫–∏–π<br>({medium_end+1}-{max_possible})</div>", unsafe_allow_html=True)

    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤
    st.write("### üìù –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
    results_df = pd.DataFrame({
        '–í–æ–ø—Ä–æ—Å': [q['text'] for q in test['questions']],
        '–û—Ç–≤–µ—Ç': st.session_state.answers,
        '–ë–∞–ª–ª—ã': st.session_state.scores
    })
    st.dataframe(results_df, use_container_width=True)

    if st.button("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç"):
        for key in ['current_theme', 'current_test', 'current_question', 'answers', 'scores']:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()

def show_results1(theme_key, test_key):
    test = THEMES[theme_key]["tests"][test_key]
    total_questions = len(test["questions"])

    # –°—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã –ø–æ —Å—Ç–∏–ª—è–º ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ "style"
    style_scores = {"R": 0, "I": 0, "A": 0, "D": 0, "S": 0}
    has_style = False

    for i in range(total_questions):
        score = st.session_state.scores[i]
        question = test["questions"][i]
        if "style" in question:
            style = question["style"]
            if style in style_scores:
                style_scores[style] += score
            else:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å: {style}")
        has_style = True  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∏–º–µ–µ—Ç style ‚Äî –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ —Ç–µ—Å—Ç —Å–æ —Å—Ç–∏–ª—è–º–∏

    # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å
    if has_style:
        dominant_style = max(style_scores, key=style_scores.get)
        max_score = style_scores[dominant_style]
        total_possible = 25  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: 25 –≤–æ–ø—Ä–æ—Å–æ–≤ √ó 1 –±–∞–ª–ª –º–∞–∫—Å–∏–º—É–º
        avg_score = sum(style_scores.values()) / len(style_scores)

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ —Å—Ç–∏–ª—è
        style_name = test.get("style_labels", {}).get(dominant_style, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å")
        style_desc = test.get("style_descriptions", {}).get(dominant_style, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.balloons()
        st.markdown(f"""
            <div class="result-box">
                <h2>üéØ –í–∞—à –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</h2>
                <h3>{style_name} ({max_score}/{total_possible})</h3>
                <p><em>"{style_desc}"</em></p>
            </div>
        """, unsafe_allow_html=True)

        st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π (–±–∞–ª–ª—ã –∏–∑ 25)")

        for style_code, score in style_scores.items():
            label = test.get("style_labels", {}).get(style_code, style_code)
            percentage = min(100, (score / total_possible) * 100)

            # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞: 0‚Äì8 = –∫—Ä–∞—Å–Ω—ã–π, 9‚Äì16 = –∂—ë–ª—Ç—ã–π, 17‚Äì25 = –∑–µ–ª—ë–Ω—ã–π
            if percentage <= 32:   # ‚â§ 8 –±–∞–ª–ª–æ–≤
                color = "#F44336"  # –ö—Ä–∞—Å–Ω—ã–π
            elif percentage <= 64: # ‚â§ 16 –±–∞–ª–ª–æ–≤
                color = "#FFC107"  # –ñ—ë–ª—Ç—ã–π
            else:                  # >16 –±–∞–ª–ª–æ–≤
                color = "#4CAF50"  # –ó–µ–ª—ë–Ω—ã–π

            # –°–æ–∑–¥–∞—ë–º HTML-—à–∫–∞–ª—É
            st.markdown(f"""
                <div style="
                    background-color: #e0e0e0;
                    height: 20px;
                    border-radius: 10px;
                    margin: 10px 0;
                    position: relative;
                    width: 100%;
                ">
                    <div style="
                        background: {color};
                        height: 100%;
                        width: {percentage}%;
                        border-radius: 10px;
                        transition: width 1s ease-in-out;
                    "></div>
                    <div style="
                        position: absolute;
                        top: 50%;
                        left: {percentage}%;
                        transform: translateX(-50%) translateY(-50%);
                        color: white;
                        font-weight: bold;
                        font-size: 14px;
                        text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
                        padding: 0 8px;
                        background: rgba(0,0,0,0.3);
                        border-radius: 15px;
                    ">{score}/{total_possible}</div>
                </div>
                <p style="margin: 5px 0; font-weight: 500; color: white;">{label}</p>
            """, unsafe_allow_html=True)

        st.markdown("### üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è")

        for style_code, score in style_scores.items():
            label = test.get("style_labels", {}).get(style_code, style_code)
            description = test.get("style_descriptions", {}).get(style_code, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            is_dominant = "‚úÖ **–î–û–ú–ò–ù–ò–†–£–Æ–©–ò–ô**" if style_code == dominant_style else ""
            st.markdown(f"""
                **{label}** ‚Äî {score}/25<br>
                _"{description}"_ {is_dominant}
                """, unsafe_allow_html=True)

    else:
        total_score = sum(st.session_state.scores)
        max_possible = total_questions * max(test["questions"][0]["scores"]) if test["questions"] else 0

        # –ù–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        result = None
        for score_range, interpretation in test["interpretation"].items():
            if score_range[0] <= total_score <= score_range[1]:
                result = interpretation
                break

        if not result:
            result = {"level": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", "emoji": "‚ùì", "advice": "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è."}

        st.balloons()
        st.markdown(f"""
            <div class="result-box">
                <h2>{result['emoji']} –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score} –∏–∑ {max_possible} –±–∞–ª–ª–æ–≤</h2>
                <h3>{result['level']}</h3>
                <p>{result['advice']}</p>
            </div>
        """, unsafe_allow_html=True)

        percentage = min(100, (total_score / max_possible) * 100)
        st.markdown(f"""
            <div style="
                background-color: #e0e0e0;
                height: 30px;
                border-radius: 15px;
                position: relative;
                margin: 20px 0;
                overflow: hidden;
                width: 100%;
            ">
                <div style="
                    background: linear-gradient(90deg, #4CAF50, #FFC107, #F44336);
                    height: 100%;
                    width: {percentage}%;
                    border-radius: 15px;
                    transition: width 1s ease-in-out;
                "></div>
                <div style="
                    position: absolute;
                    top: 50%;
                    left: {percentage}%;
                    transform: translateX(-50%) translateY(-50%);
                    color: white;
                    font-weight: bold;
                    font-size: 14px;
                    text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
                    padding: 0 8px;
                    background: rgba(0,0,0,0.3);
                    border-radius: 15px;
                ">{total_score}/{max_possible}</div>
            </div>
        """, unsafe_allow_html=True)

    # —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤
    st.markdown("### üìù –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
    results_df = pd.DataFrame({
        '–í–æ–ø—Ä–æ—Å': [q['text'] for q in test['questions']],
        '–û—Ç–≤–µ—Ç': st.session_state.answers,
        '–ë–∞–ª–ª—ã': st.session_state.scores,
        '–°—Ç–∏–ª—å': [q.get('style', '‚Äî') for q in test['questions']]  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º style
    })
    st.dataframe(results_df, use_container_width=True)

    if st.button("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç"):
        for key in ['current_theme', 'current_test', 'current_question', 'answers', 'scores']:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()